{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","console","log","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAG1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAa,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,MAAST,EAAaU,SAdvB,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,a,+BCTtBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEnBC,QAAQC,IAAIH,GAENI,EAJa,iDAImCC,UAAUL,GAJ7C,+DAKDM,MAAMF,GALL,cAKbG,EALa,gBAMEA,EAAIC,OANN,uBAMZC,EANY,EAMZA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAiBZM,GAjBY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAIA,QCHHO,EAAU,SAAC,GAAiB,IAAfrB,EAAc,EAAdA,SAEtB,ECHwB,SAACA,GAIzB,MAA0Bd,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACN1B,EAAQC,GAAU0B,MAAK,SAACC,GACpBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACtB,IAEGuB,EDfwBK,CAAa5B,GAA/Be,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACI,qCACA,6BAAKtB,IAGJsB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCG,EAAOF,aEIjBgB,EAnBM,WAGjB,MAAkC3C,mBAAS,CAAC,gBAA5C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACA,qCACI,8CACA,cAAC,EAAD,CAAaA,YAAcA,IAE3B,6BAEI6C,EAAWnB,KAAI,SAAAX,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVrD+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.16f82a29.chunk.js","sourcesContent":["import React, { useState }  from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategory }) => {\n\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n            setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2) {\n            setCategory( cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" value= { inputValue } onChange={ handleInputChange } >\n\n            </input>\n\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}","export const getGifs = async ( category ) => {\n\n    console.log(category)\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=0s7Dc9iMNg3Dtt4WR3M3p5byoaLJlUqH`;\n    const res = await fetch(url);\n    const {data} = await res.json();\n\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react';\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    return (\n        <div className=\"card\">\n            <img src={url} alt={ title } />\n            <p>{title}</p>\n        </div>\n    )\n}","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category}) => {\n\n    const {data: images, loading}= useFetchGifs(category);    \n\n    return (\n        <>\n        <h3>{category}</h3>\n            \n\n        {loading && <p>loading</p>}    \n        <div className=\"card-grid\">\n            {\n                images.map(img => (\n                    <GifGridItem \n                    key={images.id}\n                    {...img}\n                    />\n                ))\n            }\n        </div>\n            \n        </>\n\n    )\n}","import { useState , useEffect} from 'react';\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then((imgs) => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        })\n    }, [category])\n\n    return state;\n}","import React, {useState}  from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport {GifGrid} from './components/GifGrid';\nconst GifExpertApp = ()  => {\n\n\n    const [categories, setCategory] = useState(['Dragon ball']);\n\n    return  (\n    <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategory={ setCategory }/>\n\n        <ol>\n            {\n            categories.map(category => <GifGrid key={category} category={category}></GifGrid>)\n            }\n        </ol>\n    </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}